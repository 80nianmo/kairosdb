package net.opentsdb.util;



import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;

public class TournamentTree<T>
	{
	private class TreeValue<T>
		{
		private int m_iteratorNum;
		private T m_value;
		private Iterator<T> m_iterator;
		
		public TreeValue(Iterator<T> iterator, T value, int iteratorNum)
			{
			m_iterator = iterator;
			m_value = value;
			m_iteratorNum = iteratorNum;
			}
			
		public int getIteratorNum() { return (m_iteratorNum); }
		public void setValue(T value) { m_value = value; }
		public T getValue() { return (m_value); }
		public Iterator<T> getIterator() { return (m_iterator); }
		}
		
	private class TreeComparator<TreeValue<T>> implements Comparator<TreeValue<T>>
		{
		public int compare(TreeValue<T> tv1, TreeValue<T> tv2)
			{
			int resp = m_comparator.compare(tv1.getValue(), tv2.getValue());
			
			if (resp == 0)
				return (tv1.getIteratorNum() < tv2.getIteratorNum());
			else
				return (resp);
			}
		}
		
	private TreeSet<TreeValue<T>> m_treeSet;
	private Comparator<T> m_comparator;
	
	public TournamentTree(List<Iterator<T>> iterators, Comparator<T> comparator)
		{
		m_comparator = comparator;
		m_treeSet = new TreeSet<TreeValue<T>>(new TreeComparator());
		
		for (int I = 0; I < iterators.size(); I++)
			{
			Iterator<T> it = iterators.get(I);
			if (it.hasNext())
				m_treeSet.add(new TreeValue(it, it.next(), I));
			}
		}
		
	//---------------------------------------------------------------------------
	public T nextElement()
		{
		TreeValue<T> value = m_treeSet.pollFirst();
		
		T ret = value.getValue();
		
		if (value.getIterator().hasNext())
			{
			value.setValue(value.getIterator().next());
			m_treeSet.add(value);
			}
			
		return (ret);
		}
	}
